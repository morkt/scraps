// -*- C++ -*-
//! \file       deblucky.cc
//! \date       2023 Sep 17
//! \brief      decrypt Blucky script.
//

#include <fstream>
#include <string>
#include <cstdio>

// [970627][Blucky] Rekiai

const uint8_t g_charMap[] = {
    0x00, 0x5A, 0x82, 0xE6, 0x42, 0x88, 0xCD, 0xBB, 0x0F, 0xA4, 0x0A, 0x96, 0x2C, 0x0D, 0xDE, 0xF3,
    0x5F, 0x3C, 0x50, 0x24, 0x61, 0xBF, 0xD7, 0xEF, 0xD1, 0x16, 0x1A, 0xA1, 0xEE, 0x75, 0xCB, 0x68,
    0xB1, 0xC3, 0x4B, 0x29, 0xFE, 0x8B, 0xEB, 0xC9, 0xDC, 0x39, 0x18, 0x32, 0xD8, 0x04, 0x27, 0xF4,
    0xE7, 0x9F, 0x64, 0x6C, 0x7A, 0x3B, 0x62, 0x3E, 0xD5, 0xC2, 0xBD, 0x4E, 0xC6, 0xFD, 0xE9, 0x35,
    0xED, 0x76, 0x8D, 0xC1, 0x74, 0xD4, 0x3A, 0xE0, 0xD6, 0xE3, 0x33, 0x0C, 0x84, 0xB7, 0xA0, 0x69,
    0xAB, 0xC5, 0x1B, 0x70, 0x12, 0x79, 0xD9, 0x77, 0xB3, 0x78, 0xC7, 0xF1, 0x01, 0x9E, 0xFA, 0x6E,
    0x86, 0x87, 0xA6, 0x2A, 0x80, 0x4C, 0xAF, 0x0E, 0xE4, 0xB4, 0x40, 0xCF, 0xE8, 0x95, 0x07, 0x93,
    0x22, 0xC0, 0x4F, 0x44, 0x8C, 0xA8, 0x49, 0xF6, 0x38, 0xE5, 0x60, 0x4D, 0x98, 0xA9, 0x5C, 0xF5,
    0xA5, 0x36, 0x7E, 0x9B, 0xFC, 0x3D, 0x85, 0x6F, 0x7B, 0x72, 0x5D, 0x97, 0x26, 0xA2, 0x67, 0xB0,
    0x1C, 0xE1, 0x56, 0xAA, 0x43, 0x7F, 0x63, 0x73, 0x8E, 0xAC, 0x1E, 0x52, 0x89, 0x81, 0x9D, 0xBA,
    0xF0, 0x58, 0xD2, 0x9A, 0x28, 0x7C, 0x1F, 0x20, 0x6B, 0x46, 0x0B, 0x13, 0x10, 0x6A, 0x90, 0x99,
    0x71, 0x34, 0x6D, 0xA7, 0xCA, 0x2B, 0xCC, 0xEA, 0x25, 0xAE, 0xBE, 0x7D, 0x66, 0x06, 0x15, 0xAD,
    0x94, 0xF2, 0x2D, 0x48, 0x83, 0xB8, 0x65, 0x9C, 0xE2, 0x09, 0x03, 0x47, 0xB5, 0xEC, 0x30, 0xF7,
    0xB2, 0x19, 0xB6, 0x23, 0x8F, 0x55, 0x11, 0x21, 0xA3, 0x45, 0x3F, 0x02, 0x5B, 0xF8, 0x14, 0x1D,
    0x31, 0x17, 0x2E, 0x92, 0xD3, 0x8A, 0x91, 0x51, 0x37, 0x53, 0x2F, 0x57, 0xC8, 0x54, 0xF9, 0xDF,
    0xDB, 0x41, 0x4A, 0xC4, 0xDA, 0x5E, 0xBC, 0x08, 0xCE, 0xFB, 0x05, 0xB9, 0xFF, 0xDD, 0xD0, 0x59,
};

int wmain (int argc, wchar_t* argv[])
try
{
    if (argc < 3)
    {
        std::puts ("usage: deblucky INPUT OUTPUT");
        return 0;
    }
    std::ifstream in (argv[1]);
    if (!in)
    {
        std::fprintf (stderr, "%S: unable to open input file\n", argv[1]);
        return 1;
    }
    std::ofstream out (argv[2], std::ios::out|std::ios::trunc);
    if (!out)
    {
        std::fprintf (stderr, "%S: unable to open output file\n", argv[2]);
        return 2;
    }
    std::string line;
    while (std::getline (in, line))
    {
        if (!line.empty())
        {
            for (auto& c : line)
                c = g_charMap[static_cast<uint8_t> (c)];
        }
        out << line << '\n';
    }
    return 0;
}
catch (std::exception& X)
{
    std::fprintf (stderr, "%s\n", X.what());
    return 1;
}
